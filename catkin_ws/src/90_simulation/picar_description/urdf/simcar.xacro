<?xml version='1.0'?>

<robot name="simcar" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <!-- include vehicle properties -->
    <xacro:include filename="$(find picar_description)/urdf/properties.xacro" />

<!-- Chassis -->
    <link name="chassis">
        <inertial>
            <mass value="${chassisMass}"/>
            <xacro:insert_block name="chassisCenter"/>
            <inertia ixx="${chassisInertiaX}"   ixy="0.0"                   ixz="0.0"
                                                iyy="${chassisInertiaY}"    iyz="0.0"
                                                                            izz="${chassisInertiaZ}"/>
        </inertial>

        <visual>
            <xacro:insert_block name="chassisCenter"/>
            <geometry>
                <box size="${chassisLength} ${chassisWidth} ${chassisHeight}"/>
            </geometry>
        </visual>

        <collision>
            <xacro:insert_block name="chassisCenter"/>
            <geometry>
                <box size="${chassisLength} ${chassisWidth} ${chassisHeight}"/>
            </geometry>
        </collision>
    </link>

    <gazebo reference="chassis">
        <material>Gazebo/Grey</material>
    </gazebo>


<!-- Wheel side macro because of symmetry
    side: {left, right}-->
    <xacro:macro name="wheel_side" params="side">
        <xacro:if value="${side == 'left'}">
            <xacro:property name="sgn" value="1.0"/>
        </xacro:if>
        <xacro:unless value="${side == 'left'}">
            <xacro:property name="sgn" value="-1.0"/>
        </xacro:unless>

        <!-- front wheel -->
        <link name="front_${side}_wheel">
            <inertial>
                <mass value="${wheelMass}"/>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <inertia ixx="${wheelInertiaX}" ixy="0.0"               ixz="0.0"
                                                iyy="${wheelInertiaY}"  iyz="0.0"
                                                                        izz="${wheelInertiaZ}"/>
            </inertial>

            <visual>
                <!-- rotate cylinder by 90 so it looks like a wheel -->
                <origin xyz="0 0 0" rpy="${PI/2.0} 0 0"/>
                <geometry>
                    <cylinder radius="${wheelRadius}" length="${wheelWidth}"/>
                </geometry>
            </visual>

            <collision>
                <!-- rotate cylinder by 90 so it looks like a wheel -->
                <origin xyz="0 0 0" rpy="${PI/2.0} 0 0"/>
                <geometry>
                    <cylinder radius="${wheelRadius}" length="${wheelWidth}"/>
                </geometry>
            </collision>
        </link>

        <!-- front axle -->
        <link name="front_${side}_axle">
            <inertial>
                <mass value="${wheelMass}"/>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <inertia ixx="${wheelInertiaX}" ixy="0.0"               ixz="0.0"
                                                iyy="${wheelInertiaY}"  iyz="0.0"
                                                                        izz="${wheelInertiaZ}"/>
            </inertial>

            <visual>
                <origin xyz="0 0 0" rpy="${PI/2.0} 0 0"/>
                <geometry>
                    <cylinder radius="0.005" length="0.1"/>
                </geometry>
            </visual>
        </link>

        <!-- front steer joint -->
        <joint name="front_${side}_steer_joint" type="revolute">
            <parent link="chassis"/>
            <child link="front_${side}_axle"/>
            <origin xyz="${wheelBase} ${sgn*trackGaugeFront/2.0} ${wheelRadius}" rpy="0 0 0"/>
            <axis xyz="0 0 1"/>
            <limit lower="-${maxSteeringAngle}" upper="${maxSteeringAngle}" effort="${steerEffort}" velocity="${steerVelocity}"/>
        </joint>

        <!-- front wheel joint -->
        <joint name="front_${side}_wheel_joint" type="continuous">
            <parent link="front_${side}_axle"/>
            <child link="front_${side}_wheel"/>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <axis xyz="0 1 0"/>
            <dynamics friction="0.1"/>
            <limit effort="${wheelEffort}" velocity="${wheelVelocity}"/>
        </joint>


        <!-- rear wheel -->
        <link name="rear_${side}_wheel">
            <inertial>
                <mass value="${wheelMass}"/>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <inertia ixx="${wheelInertiaX}" ixy="0.0"               ixz="0.0"
                                                iyy="${wheelInertiaY}"  iyz="0.0"
                                                                        izz="${wheelInertiaZ}"/>
            </inertial>

            <visual>
                <!-- rotate cylinder by 90 so it looks like a wheel -->
                <origin xyz="0 0 0" rpy="${PI/2.0} 0 0"/>
                <geometry>
                    <cylinder radius="${wheelRadius}" length="${wheelWidth}"/>
                </geometry>
            </visual>

            <collision>
                <!-- rotate cylinder by 90 so it looks like a wheel -->
                <origin xyz="0 0 0" rpy="${PI/2.0} 0 0"/>
                <geometry>
                    <cylinder radius="${wheelRadius}" length="${wheelWidth}"/>
                </geometry>
            </collision>
        </link>

        <!-- rear wheel joint -->
        <joint name="rear_${side}_wheel_joint" type="continuous">
            <parent link="chassis"/>
            <child link="rear_${side}_wheel"/>
            <origin xyz="0 ${sgn*trackGaugeRear/2.0} ${wheelRadius}" rpy="0 0 0"/>
            <axis xyz="0 1 0"/>
            <dynamics friction="0.1"/>
            <limit effort="${wheelEffort}" velocity="${wheelVelocity}"/>
        </joint>


        <gazebo reference="front_${side}_wheel">
            <kp>${wheelKP}</kp>
            <kd>${wheelKD}</kd>
            <mu1>${wheelMU}</mu1>
            <mu2>${wheelMU}</mu2>
            <minDepth>${wheelMinDepth}</minDepth>
            <material>Gazebo/Grey</material>
        </gazebo>

        <gazebo reference="rear_${side}_wheel">
            <kp>${wheelKP}</kp>
            <kd>${wheelKD}</kd>
            <mu1>${wheelMU}</mu1>
            <mu2>${wheelMU}</mu2>
            <minDepth>${wheelMinDepth}</minDepth>
            <material>Gazebo/Grey</material>
        </gazebo>

    </xacro:macro>


    <xacro:wheel_side side="left"/>
    <xacro:wheel_side side="right"/>

    <link name="camera">

    </link>

    <link name="imu">
    </link>

    <!-- This joint info decides the pos of camera. Pitch(p in rpy) is angle to control orientation for picar camera.After change values here, you need to change the pos info in collision part anf visual part just above.-->
    <joint name="camera_joint" type="fixed">
        <origin xyz="${cameraOffsetX} ${cameraOffsetY} ${cameraOffsetZ}" rpy="0 ${cameraPitch} 0"/>
        <parent link="chassis"/>
        <child link="camera"/>
    </joint>

    <gazebo reference="camera">
        <sensor type="camera" name="camera1">
            <update_rate>30.0</update_rate>
            <camera name="head">
                <horizontal_fov>2.0</horizontal_fov>
                <image>
                    <width>${cameraResWidth}</width>
                    <height>${cameraResHeight}</height>
                    <format>R8G8B8</format>
                </image>
                <noise>
                    <type>gaussian</type>
                    <mean>0.0</mean>
                    <stddev>0.004</stddev>
                </noise>
                <clip>
                    <near>0.01</near>
                    <far>50</far>
                </clip>
            </camera>

            <always_on>true</always_on>
            <visualize>true</visualize>
            <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
                <alwaysOn>true</alwaysOn>
                <updateRate>0</updateRate>
                <cameraName>camera_node</cameraName>
                <imageTopicName>image</imageTopicName>
            </plugin>
        </sensor>
    </gazebo>


    <joint name="imu_joint" type="fixed">
        <origin xyz="${imuOffsetX} ${imuOffsetY} ${imuOffsetZ}" rpy="0 0 0"/>
        <parent link="chassis"/>
        <child link="imu"/>
    </joint>

    <gazebo reference="imu">
        <sensor type="imu" name="imu1">
            <always_on>true</always_on>
            <update_rate>100.0</update_rate>
            <visualize>false</visualize>
            <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
                <topicName>imu</topicName>
                <bodyName>imu</bodyName>
                <updateRateHZ>100</updateRateHZ>
                <frameName>imu</frameName>
            </plugin>
        </sensor>
    </gazebo>

    <gazebo>
        <plugin name="picarPlugin" filename="libpicarPlugin.so">
            <front_left_steering_joint>front_left_steer_joint</front_left_steering_joint>
            <front_right_steering_joint>front_right_steer_joint</front_right_steering_joint>
            <front_left_wheel_joint>front_left_wheel_joint</front_left_wheel_joint>
            <front_right_wheel_joint>front_right_wheel_joint</front_right_wheel_joint>
            <rear_left_wheel_joint>rear_left_wheel_joint</rear_left_wheel_joint>
            <rear_right_wheel_joint>rear_right_wheel_joint</rear_right_wheel_joint>
            
            <front_right_steering_p_gain>1000</front_right_steering_p_gain>
            <front_right_steering_i_gain>0</front_right_steering_i_gain>
            <front_right_steering_d_gain>10</front_right_steering_d_gain>
            
            <front_left_steering_p_gain>1000</front_left_steering_p_gain>
            <front_left_steering_i_gain>0</front_left_steering_i_gain>
            <front_left_steering_d_gain>10</front_left_steering_d_gain>
            
            <rear_left_wheel_p_gain>1</rear_left_wheel_p_gain>
            <rear_left_wheel_i_gain>1</rear_left_wheel_i_gain>
            <rear_left_wheel_d_gain>0</rear_left_wheel_d_gain>
            
            <rear_right_wheel_p_gain>1</rear_right_wheel_p_gain>
            <rear_right_wheel_i_gain>1</rear_right_wheel_i_gain>
            <rear_right_wheel_d_gain>0</rear_right_wheel_d_gain>



            <wheel_torque_limit>1</wheel_torque_limit>

            <wheel_radius>${wheelRadius}</wheel_radius>
            <max_velocity>2.0</max_velocity>
        </plugin>
    </gazebo>
</robot>
