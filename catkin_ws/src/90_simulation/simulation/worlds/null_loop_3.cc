/*
 * Copyright (C) 2012 Open Source Robotics Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*/
#include <gazebo/gazebo.hh>
#include <ignition/math.hh>
#include <gazebo/physics/physics.hh>
#include <gazebo/common/common.hh>
#include <stdio.h>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <cmath>

using namespace std;

// highest index of fields
int lengthFields_ = 618 -1;

// array including the 3d Data 
double fields[618][3] ={   
    {-1.5,0,0,},
    {-1.48,0,0,},
    {-1.46,0,0,},
    {-1.44,0,0,},
    {-1.42,0,0,},
    {-1.4,0,0,},
    {-1.38,0,0,},
    {-1.36,0,0,},
    {-1.34,0,0,},
    {-1.32,0,0,},
    {-1.3,0,0,},
    {-1.28,0,0,},
    {-1.26,0,0,},
    {-1.24,0,0,},
    {-1.22,0,0,},
    {-1.2,0,0,},
    {-1.18,0,0,},
    {-1.16,0,0,},
    {-1.14,0,0,},
    {-1.12,0,0,},
    {-1.1,0,0,},
    {-1.08,0,0,},
    {-1.06,0,0,},
    {-1.04,0,0,},
    {-1.02,0,0,},
    {-1,0,0,},
    {-0.98,0,0,},
    {-0.96,0,0,},
    {-0.94,0,0,},
    {-0.92,0,0,},
    {-0.9,0,0,},
    {-0.88,0,0,},
    {-0.86,0,0,},
    {-0.84,0,0,},
    {-0.82,0,0,},
    {-0.8,0,0,},
    {-0.78,0,0,},
    {-0.76,0,0,},
    {-0.74,0,0,},
    {-0.72,0,0,},
    {-0.7,0,0,},
    {-0.68,0,0,},
    {-0.66,0,0,},
    {-0.64,0,0,},
    {-0.62,0,0,},
    {-0.6,0,0,},
    {-0.58,0,0,},
    {-0.56,0,0,},
    {-0.54,0,0,},
    {-0.52,0,0,},
    {-0.5,0,0,},
    {-0.48,0,0,},
    {-0.46,0,0,},
    {-0.44,0,0,},
    {-0.42,0,0,},
    {-0.4,0,0,},
    {-0.38,0,0,},
    {-0.36,0,0,},
    {-0.34,0,0,},
    {-0.32,0,0,},
    {-0.3,0,0,},
    {-0.28,0,0,},
    {-0.26,0,0,},
    {-0.24,0,0,},
    {-0.22,0,0,},
    {-0.2,0,0,},
    {-0.18,0,0,},
    {-0.16,0,0,},
    {-0.14,0,0,},
    {-0.12,0,0,},
    {-0.1,0,0,},
    {-0.08,0,0,},
    {-0.06,0,0,},
    {-0.04,0,0,},
    {-0.02,0,0,},
    {0,0,0,},
    {0.02,0,0,},
    {0.04,0,0,},
    {0.06,0,0,},
    {0.08,0,0,},
    {0.1,0,0,},
    {0.12,0,0,},
    {0.14,0,0,},
    {0.16,0,0,},
    {0.18,0,0,},
    {0.2,0,0,},
    {0.22,0,0,},
    {0.24,0,0,},
    {0.26,0,0,},
    {0.28,0,0,},
    {0.3,0,0,},
    {0.32,0,0,},
    {0.34,0,0,},
    {0.36,0,0,},
    {0.38,0,0,},
    {0.4,0,0,},
    {0.42,0,0,},
    {0.44,0,0,},
    {0.46,0,0,},
    {0.48,0,0,},
    {0.5,0,0,},
    {0.52,0,0,},
    {0.54,0,0,},
    {0.56,0,0,},
    {0.58,0,0,},
    {0.6,0,0,},
    {0.62,0,0,},
    {0.64,0,0,},
    {0.66,0,0,},
    {0.68,0,0,},
    {0.7,0,0,},
    {0.72,0,0,},
    {0.74,0,0,},
    {0.76,0,0,},
    {0.78,0,0,},
    {0.8,0,0,},
    {0.82,0,0,},
    {0.84,0,0,},
    {0.86,0,0,},
    {0.88,0,0,},
    {0.9,0,0,},
    {0.92,0,0,},
    {0.94,0,0,},
    {0.96,0,0,},
    {0.98,0,0,},
    {1,0,0,},
    {1.02,0,0,},
    {1.04,0,0,},
    {1.06,0,0,},
    {1.08,0,0,},
    {1.1,0,0,},
    {1.12,0,0,},
    {1.14,0,0,},
    {1.16,0,0,},
    {1.18,0,0,},
    {1.2,0,0,},
    {1.22,0,0,},
    {1.24,0,0,},
    {1.26,0,0,},
    {1.28,0,0,},
    {1.3,0,0,},
    {1.32,0,0,},
    {1.34,0,0,},
    {1.36,0,0,},
    {1.38,0,0,},
    {1.4,0,0,},
    {1.42,0,0,},
    {1.44,0,0,},
    {1.46,0,0,},
    {1.48,0,0,},
    {1.5,0,0,},
    {1.50001,6.0716e-11,0,},
    {1.52001,0.000200214,0,},
    {1.54,0.000800334,0,},
    {1.55998,0.00180012,0,},
    {1.57993,0.00319917,0,},
    {1.59984,0.00499693,0,},
    {1.61972,0.00719268,0,},
    {1.63955,0.00978554,0,},
    {1.65933,0.0127745,0,},
    {1.67904,0.0161583,0,},
    {1.69868,0.0199356,0,},
    {1.71824,0.024105,0,},
    {1.73771,0.0286646,0,},
    {1.75709,0.0336129,0,},
    {1.77637,0.0389476,0,},
    {1.79553,0.0446668,0,},
    {1.81458,0.050768,0,},
    {1.8335,0.057249,0,},
    {1.85228,0.0641071,0,},
    {1.87093,0.0713395,0,},
    {1.88943,0.0789433,0,},
    {1.90777,0.0869156,0,},
    {1.92595,0.095253,0,},
    {1.94396,0.103952,0,},
    {1.96179,0.11301,0,},
    {1.97944,0.122423,0,},
    {1.99689,0.132186,0,},
    {2.01415,0.142297,0,},
    {2.0312,0.152751,0,},
    {2.04803,0.163543,0,},
    {2.06465,0.174671,0,},
    {2.08104,0.186128,0,},
    {2.0972,0.197911,0,},
    {2.11313,0.210015,0,},
    {2.1288,0.222434,0,},
    {2.14423,0.235165,0,},
    {2.15939,0.248202,0,},
    {2.1743,0.261539,0,},
    {2.18893,0.275172,0,},
    {2.20329,0.289094,0,},
    {2.21736,0.303301,0,},
    {2.23115,0.317787,0,},
    {2.24465,0.332545,0,},
    {2.25785,0.347571,0,},
    {2.27075,0.362857,0,},
    {2.28333,0.378399,0,},
    {2.29561,0.394189,0,},
    {2.30756,0.410221,0,},
    {2.3192,0.426489,0,},
    {2.3305,0.442987,0,},
    {2.34148,0.459707,0,},
    {2.35211,0.476643,0,},
    {2.36241,0.493789,0,},
    {2.37236,0.511138,0,},
    {2.38196,0.528681,0,},
    {2.39121,0.546414,0,},
    {2.40011,0.564327,0,},
    {2.40864,0.582416,0,},
    {2.41681,0.600671,0,},
    {2.42461,0.619085,0,},
    {2.43204,0.637653,0,},
    {2.4391,0.656365,0,},
    {2.44579,0.675214,0,},
    {2.45209,0.694194,0,},
    {2.45802,0.713295,0,},
    {2.46356,0.732512,0,},
    {2.46872,0.751835,0,},
    {2.47349,0.771258,0,},
    {2.47787,0.790772,0,},
    {2.48186,0.8,0,},
    {2.48545,0.830044,0,},
    {2.48865,0.849785,0,},
    {2.49146,0.869587,0,},
    {2.49387,0.889441,0,},
    {2.49588,0.909339,0,},
    {2.4975,0.929274,0,},
    {2.49871,0.949237,0,},
    {2.49953,0.96922,0,},
    {2.49994,0.989215,0,},
    {2.49996,1.00921,0,},
    {2.49957,1.02921,0,},
    {2.49879,1.04919,0,},
    {2.49761,1.06916,0,},
    {2.49602,1.0891,0,},
    {2.49404,1.109,0,},
    {2.49166,1.12886,0,},
    {2.48889,1.14866,0,},
    {2.48572,1.16841,0,},
    {2.48215,1.18809,0,},
    {2.47819,1.20769,0,},
    {2.47385,1.22721,0,},
    {2.46911,1.24664,0,},
    {2.46398,1.26597,0,},
    {2.45847,1.2852,0,},
    {2.45257,1.30431,0,},
    {2.4463,1.3233,0,},
    {2.43964,1.34216,0,},
    {2.43261,1.36088,0,},
    {2.42521,1.37946,0,},
    {2.41743,1.39789,0,},
    {2.40929,1.41616,0,},
    {2.40079,1.43426,0,},
    {2.39192,1.45219,0,},
    {2.3827,1.46993,0,},
    {2.37313,1.48749,0,},
    {2.3632,1.50486,0,},
    {2.35293,1.52202,0,},
    {2.34232,1.53897,0,},
    {2.33138,1.55571,0,},
    {2.3201,1.57222,0,},
    {2.30849,1.58851,0,},
    {2.29656,1.60456,0,},
    {2.28431,1.62037,0,},
    {2.27175,1.63593,0,},
    {2.25887,1.65124,0,},
    {2.2457,1.66628,0,},
    {2.23222,1.68106,0,},
    {2.21846,1.69557,0,},
    {2.2044,1.7098,0,},
    {2.19007,1.72375,0,},
    {2.17546,1.7374,0,},
    {2.16057,1.75076,0,},
    {2.14543,1.76382,0,},
    {2.13002,1.77658,0,},
    {2.11437,1.78902,0,},
    {2.09846,1.80115,0,},
    {2.08232,1.81296,0,},
    {2.06595,1.82444,0,},
    {2.04935,1.83559,0,},
    {2.03253,1.84641,0,},
    {2.01549,1.85689,0,},
    {1.99825,1.86703,0,},
    {1.98081,1.87682,0,},
    {1.96318,1.88626,0,},
    {1.94536,1.89535,0,},
    {1.92737,1.90408,0,},
    {1.9092,1.91244,0,},
    {1.89087,1.92044,0,},
    {1.87239,1.92808,0,},
    {1.85375,1.93534,0,},
    {1.83498,1.94223,0,},
    {1.81607,1.94874,0,},
    {1.79703,1.95487,0,},
    {1.77788,1.96062,0,},
    {1.75861,1.96598,0,},
    {1.73924,1.97096,0,},
    {1.71977,1.97555,0,},
    {1.70022,1.97975,0,},
    {1.68059,1.98356,0,},
    {1.66088,1.98697,0,},
    {1.64111,1.98999,0,},
    {1.62128,1.99262,0,},
    {1.60141,1.99485,0,},
    {1.58149,1.99667,0,},
    {1.56154,1.9981,0,},
    {1.54157,1.99914,0,},
    {1.52158,1.99977,0,},
    {1.50158,2,0,},
    {1.5,2,0,},
    {1.48,2,0,},
    {1.46,2,0,},
    {1.44,2,0,},
    {1.42,2,0,},
    {1.4,2,0,},
    {1.38,2,0,},
    {1.36,2,0,},
    {1.34,2,0,},
    {1.32,2,0,},
    {1.3,2,0,},
    {1.28,2,0,},
    {1.26,2,0,},
    {1.24,2,0,},
    {1.22,2,0,},
    {1.2,2,0,},
    {1.18,2,0,},
    {1.16,2,0,},
    {1.14,2,0,},
    {1.12,2,0,},
    {1.1,2,0,},
    {1.08,2,0,},
    {1.06,2,0,},
    {1.04,2,0,},
    {1.02,2,0,},
    {1,2,0,},
    {0.98,2,0,},
    {0.96,2,0,},
    {0.94,2,0,},
    {0.92,2,0,},
    {0.9,2,0,},
    {0.88,2,0,},
    {0.86,2,0,},
    {0.84,2,0,},
    {0.82,2,0,},
    {0.8,2,0,},
    {0.78,2,0,},
    {0.76,2,0,},
    {0.74,2,0,},
    {0.72,2,0,},
    {0.7,2,0,},
    {0.68,2,0,},
    {0.66,2,0,},
    {0.64,2,0,},
    {0.62,2,0,},
    {0.6,2,0,},
    {0.58,2,0,},
    {0.56,2,0,},
    {0.54,2,0,},
    {0.52,2,0,},
    {0.5,2,0,},
    {0.48,2,0,},
    {0.46,2,0,},
    {0.44,2,0,},
    {0.42,2,0,},
    {0.4,2,0,},
    {0.38,2,0,},
    {0.36,2,0,},
    {0.34,2,0,},
    {0.32,2,0,},
    {0.3,2,0,},
    {0.28,2,0,},
    {0.26,2,0,},
    {0.24,2,0,},
    {0.22,2,0,},
    {0.2,2,0,},
    {0.18,2,0,},
    {0.16,2,0,},
    {0.14,2,0,},
    {0.12,2,0,},
    {0.1,2,0,},
    {0.08,2,0,},
    {0.06,2,0,},
    {0.04,2,0,},
    {0.02,2,0,},
    {0,2,0,},
    {-0.02,2,0,},
    {-0.04,2,0,},
    {-0.06,2,0,},
    {-0.08,2,0,},
    {-0.1,2,0,},
    {-0.12,2,0,},
    {-0.14,2,0,},
    {-0.16,2,0,},
    {-0.18,2,0,},
    {-0.2,2,0,},
    {-0.22,2,0,},
    {-0.24,2,0,},
    {-0.26,2,0,},
    {-0.28,2,0,},
    {-0.3,2,0,},
    {-0.32,2,0,},
    {-0.34,2,0,},
    {-0.36,2,0,},
    {-0.38,2,0,},
    {-0.4,2,0,},
    {-0.42,2,0,},
    {-0.44,2,0,},
    {-0.46,2,0,},
    {-0.48,2,0,},
    {-0.5,2,0,},
    {-0.52,2,0,},
    {-0.54,2,0,},
    {-0.56,2,0,},
    {-0.58,2,0,},
    {-0.6,2,0,},
    {-0.62,2,0,},
    {-0.64,2,0,},
    {-0.66,2,0,},
    {-0.68,2,0,},
    {-0.7,2,0,},
    {-0.72,2,0,},
    {-0.74,2,0,},
    {-0.76,2,0,},
    {-0.78,2,0,},
    {-0.8,2,0,},
    {-0.82,2,0,},
    {-0.84,2,0,},
    {-0.86,2,0,},
    {-0.88,2,0,},
    {-0.9,2,0,},
    {-0.92,2,0,},
    {-0.94,2,0,},
    {-0.96,2,0,},
    {-0.98,2,0,},
    {-1,2,0,},
    {-1.02,2,0,},
    {-1.04,2,0,},
    {-1.06,2,0,},
    {-1.08,2,0,},
    {-1.1,2,0,},
    {-1.12,2,0,},
    {-1.14,2,0,},
    {-1.16,2,0,},
    {-1.18,2,0,},
    {-1.2,2,0,},
    {-1.22,2,0,},
    {-1.24,2,0,},
    {-1.26,2,0,},
    {-1.28,2,0,},
    {-1.3,2,0,},
    {-1.32,2,0,},
    {-1.34,2,0,},
    {-1.36,2,0,},
    {-1.38,2,0,},
    {-1.4,2,0,},
    {-1.42,2,0,},
    {-1.44,2,0,},
    {-1.46,2,0,},
    {-1.48,2,0,},
    {-1.5,2,0,},
    {-1.5,2,0,},
    {-1.52,1.9998,0,},
    {-1.53999,1.9992,0,},
    {-1.55997,1.9982,0,},
    {-1.57992,1.9968,0,},
    {-1.59984,1.995,0,},
    {-1.61972,1.99281,0,},
    {-1.63955,1.99022,0,},
    {-1.65932,1.98723,0,},
    {-1.67903,1.98384,0,},
    {-1.69867,1.98007,0,},
    {-1.71823,1.9759,0,},
    {-1.73771,1.97134,0,},
    {-1.75708,1.96639,0,},
    {-1.77636,1.96105,0,},
    {-1.79552,1.95534,0,},
    {-1.81457,1.94923,0,},
    {-1.83349,1.94275,0,},
    {-1.85228,1.9359,0,},
    {-1.87092,1.92866,0,},
    {-1.88942,1.92106,0,},
    {-1.90776,1.91309,0,},
    {-1.92594,1.90475,0,},
    {-1.94395,1.89605,0,},
    {-1.96178,1.88699,0,},
    {-1.97943,1.87758,0,},
    {-1.99688,1.86782,0,},
    {-2.01414,1.85771,0,},
    {-2.03119,1.84725,0,},
    {-2.04803,1.83646,0,},
    {-2.06465,1.82533,0,},
    {-2.08104,1.81388,0,},
    {-2.0972,1.80209,0,},
    {-2.11312,1.78999,0,},
    {-2.1288,1.77757,0,},
    {-2.14422,1.76484,0,},
    {-2.15939,1.7518,0,},
    {-2.17429,1.73847,0,},
    {-2.18892,1.72483,0,},
    {-2.20328,1.71091,0,},
    {-2.21736,1.6967,0,},
    {-2.23115,1.68222,0,},
    {-2.24465,1.66746,0,},
    {-2.25784,1.65243,0,},
    {-2.27074,1.63715,0,},
    {-2.28333,1.62161,0,},
    {-2.2956,1.60582,0,},
    {-2.30756,1.58979,0,},
    {-2.31919,1.57352,0,},
    {-2.3305,1.55702,0,},
    {-2.34147,1.5403,0,},
    {-2.35211,1.52336,0,},
    {-2.36241,1.50622,0,},
    {-2.37236,1.48887,0,},
    {-2.38196,1.47133,0,},
    {-2.39121,1.45359,0,},
    {-2.4001,1.43568,0,},
    {-2.40864,1.41759,0,},
    {-2.4168,1.39934,0,},
    {-2.42461,1.38092,0,},
    {-2.43204,1.36235,0,},
    {-2.4391,1.34364,0,},
    {-2.44579,1.32479,0,},
    {-2.45209,1.30581,0,},
    {-2.45802,1.28671,0,},
    {-2.46356,1.2675,0,},
    {-2.46872,1.24817,0,},
    {-2.47349,1.22875,0,},
    {-2.47787,1.20924,0,},
    {-2.48185,1.18964,0,},
    {-2.48545,1.16996,0,},
    {-2.48865,1.15022,0,},
    {-2.49146,1.13042,0,},
    {-2.49387,1.11057,0,},
    {-2.49588,1.09067,0,},
    {-2.4975,1.07073,0,},
    {-2.49871,1.05077,0,},
    {-2.49953,1.03079,0,},
    {-2.49994,1.01079,0,},
    {-2.49996,0.990793,0,},
    {-2.49957,0.970797,0,},
    {-2.49879,0.950813,0,},
    {-2.49761,0.930848,0,},
    {-2.49602,0.910911,0,},
    {-2.49404,0.89101,0,},
    {-2.49166,0.871152,0,},
    {-2.48889,0.851346,0,},
    {-2.48572,0.831599,0,},
    {-2.48215,0.81192,0,},
    {-2.4782,0.792315,0,},
    {-2.47385,0.772794,0,},
    {-2.46911,0.753364,0,},
    {-2.46398,0.734033,0,},
    {-2.45847,0.714807,0,},
    {-2.45258,0.695696,0,},
    {-2.4463,0.676707,0,},
    {-2.43964,0.657847,0,},
    {-2.43261,0.639124,0,},
    {-2.42521,0.620545,0,},
    {-2.41744,0.602118,0,},
    {-2.4093,0.58385,0,},
    {-2.40079,0.565748,0,},
    {-2.39193,0.547821,0,},
    {-2.38271,0.530074,0,},
    {-2.37313,0.512515,0,},
    {-2.36321,0.495151,0,},
    {-2.35294,0.477989,0,},
    {-2.34233,0.461035,0,},
    {-2.33138,0.444298,0,},
    {-2.3201,0.427782,0,},
    {-2.30849,0.411496,0,},
    {-2.29656,0.395445,0,},
    {-2.28431,0.379636,0,},
    {-2.27175,0.364074,0,},
    {-2.25888,0.348768,0,},
    {-2.2457,0.333721,0,},
    {-2.23223,0.318941,0,},
    {-2.21846,0.304434,0,},
    {-2.20441,0.290205,0,},
    {-2.19007,0.27626,0,},
    {-2.17546,0.262604,0,},
    {-2.16058,0.249243,0,},
    {-2.14543,0.236182,0,},
    {-2.13003,0.223427,0,},
    {-2.11437,0.210983,0,},
    {-2.09847,0.198854,0,},
    {-2.08233,0.187046,0,},
    {-2.06595,0.175563,0,},
    {-2.04935,0.164409,0,},
    {-2.03253,0.15359,0,},
    {-2.0155,0.143109,0,},
    {-1.99826,0.132971,0,},
    {-1.98082,0.12318,0,},
    {-1.96319,0.11374,0,},
    {-1.94537,0.104654,0,},
    {-1.92738,0.0959263,0,},
    {-1.90921,0.0875601,0,},
    {-1.89088,0.0795589,0,},
    {-1.8724,0.0719259,0,},
    {-1.85376,0.0646641,0,},
    {-1.83498,0.0577764,0,},
    {-1.81607,0.0512656,0,},
    {-1.79704,0.0451343,0,},
    {-1.77788,0.0393849,0,},
    {-1.75862,0.0340197,0,},
    {-1.73925,0.029041,0,},
    {-1.71978,0.0244505,0,},
    {-1.70023,0.0202503,0,},
    {-1.68059,0.016442,0,},
    {-1.66089,0.0130271,0,},
    {-1.64112,0.010007,0,},
    {-1.62129,0.00738284,0,},
    {-1.60141,0.00515572,0,},
    {-1.5815,0.00332653,0,},
    {-1.56155,0.001896,0,},
    {-1.54158,0.000864697,0,},
    {-1.52159,0.000233033,0,},
    {-1.50159,1.26243e-06,0,}
};

// std::vector<std::vector<double>> getCSV(string name);

namespace gazebo
{
  class NullLoop : public ModelPlugin
  {
    public: void Load(physics::ModelPtr _parent, sdf::ElementPtr /*_sdf*/)
    {
      // Store the pointer to the model
      this->model = _parent;

        // create the animation
       
        gazebo::common::PoseKeyFrame *key;

        // set starting location of the box
        // std::vector<std::vector<double>> fields;
        // fields = getCSV("track_simple_loop1.csv");
        int startValue_ = 0;
        double frequenz_ = 10;
        double vel_ = -0.2;
        double aveDist_ =  vel_ / frequenz_ / 0.02; 

        double deltaX_ =0;
        double deltaY_=0;
        double angle_=0;
        int curIdx_ = 0;
        int nextIdx_ = 0;
        bool openLoop = true;
        int i = 0;
       gazebo::common::PoseAnimationPtr anim(
              // name the animation "test",
              // make it last 10 seconds,
              // and set it on a repeat loop
              new gazebo::common::PoseAnimation("test", 0.02*lengthFields_/ vel_, true));

        while(openLoop){
          // idices of the current and the next point of the track
          double curIdxExact_ = lengthFields_ + startValue_ + aveDist_ * i;
          curIdx_ = abs(fmod(curIdxExact_, lengthFields_));
          nextIdx_= abs(fmod(lengthFields_ + startValue_ + aveDist_ * (i+1), lengthFields_));
          // Abort criteria one loop is finished 
          if (i >1  && abs(curIdx_ - startValue_) <2 ){
            openLoop = false;
            curIdx_ = startValue_;
            nextIdx_ = startValue_ +aveDist_;
            return;
          }


          // determine values
          // rotation at time instance
          deltaX_ = fields[nextIdx_][0] - fields[curIdx_][0];
          deltaY_ = fields[nextIdx_][1] - fields[curIdx_][1]; 
                
          angle_ = atan(deltaY_/deltaX_);
          // small delta X_
          
          if (deltaX_ <0 ){
            angle_ = 3.14159 + angle_;
          }
          if (std::abs(deltaX_) < 0.02 ){
            if (deltaY_ >0){
            angle_ = 3.14159 /2;
            }
            else{
              angle_ = -3.14159 /2;
            }
          }
          key = anim->CreateKeyFrame(i /frequenz_);
          key->Translation(ignition::math::Vector3d(fields[curIdx_][0],fields[curIdx_][1],fields[curIdx_][2]));
          key->Rotation(ignition::math::Quaterniond(0, 0,angle_ ));
          
          
          gzmsg << "CurIdex_:" << curIdx_<< "\n";
          gzmsg << "NextIdex_:"<< nextIdx_ << "\n";
          gzmsg << "Time :" << i/ frequenz_<< "\n";
          gzmsg << "Vector:"<< ignition::math::Vector3d(fields[curIdx_][0],fields[curIdx_][1],fields[curIdx_][2])<< "\n\n";
          i++;
        }    
        // set final location equal to starting location
        
        

        // key = anim->CreateKeyFrame(0.0);
        // key->Translation(ignition::math::Vector3d(0, 0, 0));
        // key->Rotation(ignition::math::Quaterniond(0, 0, 0)); 
        // // set waypoint location after 2 seconds
        // key = anim->CreateKeyFrame(2.0);
        // key->Translation(ignition::math::Vector3d(-50, -50, 0));
        // key->Rotation(ignition::math::Quaterniond(0, 0, 1.5707));


        // key = anim->CreateKeyFrame(4.0);
        // key->Translation(ignition::math::Vector3d(10, 20, 0));
        // key->Rotation(ignition::math::Quaterniond(0, 0, 1.5707));


        // key = anim->CreateKeyFrame(6.0);
        // key->Translation(ignition::math::Vector3d(-10, 20, 0));
        // key->Rotation(ignition::math::Quaterniond(0, 0, 1.5707));

        // key = anim->CreateKeyFrame(8.0);
        // key->Translation(ignition::math::Vector3d(10, -20, 0));
        // key->Rotation(ignition::math::Quaterniond(0, 0, 1.5707));

        // // set the animation
        _parent->SetAnimation(anim);
    }

    // Pointer to the model
    private: physics::ModelPtr model;

    // Pointer to the update event connection
    private: event::ConnectionPtr updateConnection;
  };

  // Register this plugin with the simulator
  GZ_REGISTER_MODEL_PLUGIN(NullLoop)
}