<launch>
    <arg name="ns"/>
    <arg name="machine" default="$(arg ns)"/>
    <arg name="sim" default="false"/>
    <arg name="paused" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="compute_on_pi" default="false"/>


    <machine
            name="$(arg machine)"
            address="$(arg machine).local"
            user="pi"
            env-loader="/home/pi/picar_mum/catkin_ws/env.sh"
    />

    <group unless="$(arg sim)">
        <!-- start camera node -->
        <include file="$(find camera)/launch/camera_node.launch">
            <arg name="ns" value="$(arg ns)"/>
        </include>

        <include file="$(find motor)/launch/motor_node.launch">
            <arg name="ns" value="$(arg ns)"/>
            <arg name="machine" value="$(arg machine)"/>
        </include>
    </group>

    <group if="$(arg sim)">
        <include file="$(find simulation)/launch/simple_loop_cw.launch">
            <arg name="ns" value="$(arg ns)"/>
            <arg name="paused" value="$(arg paused)"/>
            <arg name="gui" value="$(arg gui)"/>
        </include>
    </group>



    <!--start color_normalization_node -->
    <remap from="color_normalization_node/input_image/compressed" to="camera_node/image/compressed"/>
    <include file="$(find color_normalization)/launch/color_normalization_node.launch">
        <arg name="ns" value="$(arg ns)"/>
        <arg name="machine" value="$(arg machine)"/>
        <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
    </include>

    <!--  launch  DETECTION nodes (line and leader) -->

    <!-- launch line_detection_node -->
    <remap from="line_detection_node/input_image/raw" to="color_normalization_node/output_image/raw"/>
    <include file="$(find line_detection)/launch/line_detection_node.launch">
        <arg name="ns" value="$(arg ns)"/>
        <arg name="machine" value="$(arg machine)"/>
        <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
    </include>

    <!-- start ground_projection_node -->
    <remap from="ground_projection_node/track_position_input" to="line_detection_node/track_position"/>
    <group if="$(arg sim)">
        <include file="$(find ground_projection)/launch/ground_projection_node.launch">
            <arg name="ns" value="$(arg ns)"/>
            <arg name="machine" value="$(arg machine)"/>
            <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
            <arg name="distorted_input" value="false"/>
        </include>
    </group>
    <group unless="$(arg sim)">
        <include file="$(find ground_projection)/launch/ground_projection_node.launch">
            <arg name="ns" value="$(arg ns)"/>
            <arg name="machine" value="$(arg machine)"/>
            <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
            <arg name="distorted_input" value="true"/>
        </include>
    </group>

    <!-- start lane_pose_estimation_node -->
    <remap from="lane_pose_estimation_node/track_position" to="ground_projection_node/track_position_output"/>
    <include file="$(find lane_pose_estimation)/launch/lane_pose_estimation_node.launch">
        <arg name="ns" value="$(arg ns)"/>
        <arg name="machine" value="$(arg machine)"/>
        <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
    </include>

    <!-- start lane_control_node -->
    <remap from="lane_control_node/pose_input" to="lane_pose_estimation_node/pose"/>
    <remap from="lane_control_node/car_cmd" to="motor_node/car_cmd" />
    <include file="$(find lane_control)/launch/lane_control_node.launch">
        <arg name="ns" value="$(arg ns)"/>
        <arg name="machine" value="$(arg machine)"/>
        <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
    </include>

</launch>