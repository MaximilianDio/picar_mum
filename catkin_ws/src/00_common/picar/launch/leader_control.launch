<launch>
    <arg name="ns"/>
    <arg name="machine" default="$(arg ns)"/>
    <arg name="sim" default="false"/>
    <arg name="paused" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="compute_on_pi" default="false"/>


    <machine
            name="$(arg machine)"
            address="$(arg machine).local"
            user="pi"
            env-loader="/home/pi/picar_mum/catkin_ws/env.sh"
    />

    <group unless="$(arg sim)">
        <!-- start camera node -->
        <include file="$(find camera)/launch/camera_node.launch">
            <arg name="ns" value="$(arg ns)"/>
            <arg name="machine" value="$(arg machine)"/>
        </include>

         <!-- start test_extrinsics_node -->
        <include file="$(find extrinsics)/launch/test_extrinsics_node.launch">
            <arg name="ns" value="$(arg ns)"/>
        </include>

        <include file="$(find motor)/launch/motor_node.launch">
            <arg name="ns" value="$(arg ns)"/>
            <arg name="machine" value="$(arg machine)"/>
        </include>

                <!-- start node controlling the imu -->
        <include file="$(find imu)/launch/imu_node.launch">
            <arg name="ns" value="$(arg ns)"/>
            <arg name="machine" value="$(arg machine)"/>
        </include>
    </group>

    <!-- If running in simulation-->
    <group if="$(arg sim)">


        <include file="$(find simulation)/launch/simple_loop_cw_new.launch"> <!-- import strecke mit punkten grade aus-->
            <arg name="ns" value="$(arg ns)"/>
            <arg name="paused" value="$(arg paused)"/>
            <arg name="gui" value="$(arg gui)"/>
	    <arg name="verbose" value="true"/>
        </include>
    </group>

    <!-- Running always-->
    <!--  control path: leader follower -->

     <!--start color_normalization_node -->
    <remap from="color_normalization_node/input_image/compressed" to="camera_node/image/compressed"/>
    <include file="$(find color_normalization)/launch/color_normalization_node.launch">
        <arg name="ns" value="$(arg ns)"/>
        <arg name="machine" value="$(arg machine)"/>
        <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
    </include>

    <!-- start leader_detection_node -->
    <remap from="leader_detection_node/input_image/raw" to="color_normalization_node/output_image/raw"/>
    <include file="$(find leader_detection)/launch/leader_detection_node.launch">
        <arg name="ns" value="$(arg ns)"/>
        <arg name="machine" value="$(arg machine)"/>
        <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
    </include>

    <!-- start world_projection_node -->
    <!-- either in real - with distortion or in simulation - without distortion -->
    <remap from="world_projection_node/leader_blue_ball_position_input" to="leader_detection_node/leader_blue_ball_position"/>
    <remap from="world_projection_node/leader_green_ball_position_input" to="leader_detection_node/leader_green_ball_position"/>
    <group if="$(arg sim)">
        <include file="$(find world_projection)/launch/world_projection_node.launch">
            <arg name="ns" value="$(arg ns)"/>
            <arg name="machine" value="$(arg machine)"/>
            <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
            <arg name="distorted_input" value="false"/>
        </include>
    </group>

    <group unless="$(arg sim)">
        <include file="$(find world_projection)/launch/world_projection_node.launch">
            <arg name="ns" value="$(arg ns)"/>
            <arg name="machine" value="$(arg machine)"/>
            <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
            <arg name="distorted_input" value="true"/>
        </include>
    </group>

    <!-- start leader_pose_estimation_node -->
    <remap from="leader_pose_estimation_node/leader_blue_ball_position" to="world_projection_node/leader_blue_ball_position_output"/>
    <remap from="leader_pose_estimation_node/leader_green_ball_position" to="world_projection_node/leader_green_ball_position_output"/>
    <include file="$(find leader_pose_estimation)/launch/leader_pose_estimation_node.launch">
        <arg name="ns" value="$(arg ns)"/>
        <arg name="machine" value="$(arg machine)"/>
        <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
    </include>

    <!-- start leader control_node-->t
    <remap from="leader_control_node/leader_relative_pos_input" to="leader_pose_estimation_node/leader_relative_pos"/>
    <remap from="leader_control_node/car_cmd" to="motor_node/car_cmd" />
    <include file="$(find leader_control)/launch/leader_control_node.launch">
        <arg name="ns" value="$(arg ns)"/>
        <arg name="machine" value="$(arg machine)"/>
        <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
    </include>

</launch>