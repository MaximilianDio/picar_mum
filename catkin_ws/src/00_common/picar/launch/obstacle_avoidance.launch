<launch>
    <arg name="ns"/>
    <arg name="machine" default="$(arg ns)"/>
    <arg name="sim" default="false"/>
    <arg name="paused" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="compute_on_pi" default="false"/>
    <arg name="local" default="true"/>


    <machine
            name="$(arg machine)"
            address="$(arg machine).local"
            user="pi"
            env-loader="/home/pi/picar_mum/catkin_ws/env.sh"
    />

    <group unless="$(arg sim)">
        <!-- start camera node -->
        <include file="$(find camera)/launch/camera_node.launch">
            <arg name="ns" value="$(arg ns)"/>
            <arg name="machine" value="$(arg machine)"/>
        </include>

        <include file="$(find motor)/launch/motor_node.launch">
            <arg name="ns" value="$(arg ns)"/>
            <arg name="machine" value="$(arg machine)"/>
        </include>

    </group>

    <!-- If running in simulation-->
    <group if="$(arg sim)">
        <!-- simulation environment -->
        <include file="$(find simulation)/launch/race_loop.launch">
            <arg name="ns" value="$(arg ns)"/>
            <arg name="paused" value="$(arg paused)"/>
            <arg name="gui" value="$(arg gui)"/>
        </include>
    </group>

    <!-- Running always-->

    <!--start color_normalization_node -->
    <remap from="color_normalization_node/input_image/compressed" to="camera_node/image/compressed"/>
    <include file="$(find color_normalization)/launch/color_normalization_node.launch">
        <arg name="ns" value="$(arg ns)"/>
        <arg name="machine" value="$(arg machine)"/>
        <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
    </include>

    <!-- perception nodes -->
    <!-- aprlitag detection -->
    <remap from="apriltag_detection_node/input_image/raw" to="color_normalization_node/output_image/raw"/>
    <group if="$(arg sim)">
        <include file="$(find apriltag_detection)/launch/apriltag_detection_node.launch">
            <arg name="ns" value="$(arg ns)"/>
            <arg name="machine" value="$(arg machine)"/>
            <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
            <arg name="distorted_input" value="false"/>
        </include>
    </group>
    <group unless="$(arg sim)">
        <include file="$(find apriltag_detection)/launch/apriltag_detection_node.launch">
            <arg name="ns" value="$(arg ns)"/>
            <arg name="machine" value="$(arg machine)"/>
            <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
            <arg name="distorted_input" value="true"/>
        </include>
    </group>
    <!-- curve detection -->
    <remap from="curved_line_detection_node/input_image/raw" to="color_normalization_node/output_image/raw"/>
    <group if="$(arg sim)">
        <include file="$(find curved_line_detection)/launch/curved_line_detection_node.launch">
            <arg name="ns" value="$(arg ns)"/>
            <arg name="machine" value="$(arg machine)"/>
            <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
            <arg name="distorted_input" value="false"/>
        </include>
    </group>
    <group unless="$(arg sim)">
        <include file="$(find curved_line_detection)/launch/curved_line_detection_node.launch">
            <arg name="ns" value="$(arg ns)"/>
            <arg name="machine" value="$(arg machine)"/>
            <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
            <arg name="distorted_input" value="true"/>
        </include>
    </group>



    <!-- Trajectory planner -->
    <!-- pacemaker -->
    <include file="$(find pacemaker_trajectory_planner)/launch/pacemaker_trajectory_planner_node.launch">
        <arg name="ns" value="$(arg ns)"/>
        <arg name="machine" value="$(arg machine)"/>
        <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
    </include>
    <!-- state machine (trajecory planner) -->
    <remap from="trajectory_planner_node/pacemaker" to="pacemaker_trajectory_planner_node/clock"/>
    <remap from="trajectory_planner_node/obstacle_position" to="apriltag_detection_node/apriltag_position"/>
    <remap from="trajectory_planner_node/curve_point" to="curved_line_detection_node/curve_point"/>


    <!-- from controller to motor -->
    <remap from="trajectory_planner_node/des_car_cmd" to="motor_node/car_cmd" />
    <!-- TODO map des velocity from des_car_cmd to trajectory tracker -->
    <include file="$(find trajectory_planner)/launch/trajectory_planner_node.launch">
        <arg name="ns" value="$(arg ns)"/>
        <arg name="machine" value="$(arg machine)"/>
        <arg name="local" value="$(eval not arg('compute_on_pi'))"/>
    </include>




</launch>